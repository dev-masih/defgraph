-- require defgraph
local defgraph = require("defgraph.defgraph")

function init(self)
    msg.post(".", "acquire_input_focus")
    
    -- change debug properties
    defgraph.debug_set_properties(vmath.vector4(1, 0, 1, 1), vmath.vector4(0, 1, 0, 1), 5)

    self.node_ids = {}
    self.node_positions = {}
    self.node_goas_up = {}

    -- defining graph nodes of the map
    local start_position = vmath.vector3(100, 100, 0)
    for i = 1, 36 do
        table.insert(self.node_ids, defgraph.map_add_node(start_position))
        table.insert(self.node_positions, start_position)
        table.insert(self.node_goas_up, true)
        start_position = start_position + vmath.vector3(20, 13, 0)
    end

    -- defining routes between nodes
    for i = 1, #self.node_ids - 1 do
        defgraph.map_add_route(self.node_ids[i], self.node_ids[i + 1])
    end
end

function on_input(self, action_id, action)
    if action_id == hash("left_click") and action.pressed then
        factory.create("#factory", vmath.vector3(action.x, action.y, 0), nil, nil, 0.3)
    end
end

function update(self, dt)

    for i = 1, 36 do
        if self.node_goas_up[i] then
            self.node_positions[i] = self.node_positions[i] + vmath.vector3(0, 2, 0)
            if self.node_positions[i].y > 560 then
                self.node_goas_up[i] = false
            end
        else
            self.node_positions[i] = self.node_positions[i] - vmath.vector3(0, 2, 0)
            if self.node_positions[i].y < 100 then
                self.node_goas_up[i] = true
            end
        end
        defgraph.map_update_node_position(self.node_ids[i], self.node_positions[i])
    end

    -- draw debug info of nodes and routes
    --defgraph.debug_draw_map_nodes(true)
    defgraph.debug_draw_map_routes()

    msg.post("@render:", "draw_text", { text = "example dynamic node", position = vmath.vector3(20, 620, 0) } )
    msg.post("@render:", "draw_text", { text = "left click: deploy dot - right click: change routes", position = vmath.vector3(20, 600, 0) } )
end
